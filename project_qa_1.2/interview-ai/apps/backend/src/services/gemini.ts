import { logger } from '../utils/logger'
import axios from 'axios'
import https from 'https'

/**
 * Servicio de Google Gemini AI (Alternativa GRATUITA a OpenAI)
 * 
 * Para obtener una API key gratuita:
 * 1. Ve a https://makersuite.google.com/app/apikey
 * 2. Crea un nuevo proyecto
 * 3. Genera una API key gratuita
 * 4. L√≠mites: 15 requests por minuto, gratis para siempre
 * 
 * Actualizado con preguntas contextuales inteligentes
 */

interface GeminiResponse {
  candidates: Array<{
    content: {
      parts?: Array<{
        text: string
      }>
      text?: string  // Formato alternativo
    } | string  // Puede ser string directo
  }>
}

class GeminiService {
  private apiKey: string
  private baseUrl: string = 'https://generativelanguage.googleapis.com/v1beta'

  constructor() {
    this.apiKey = process.env.GEMINI_API_KEY || ''

    if (!this.apiKey) {
      logger.warn('‚ö†Ô∏è  GEMINI_API_KEY no configurada. Usando modo simulaci√≥n.')
    } else {
      logger.info('‚úÖ Gemini AI client initialized with API key: ' + this.apiKey.substring(0, 20) + '...')
    }
  }

  /**
   * Genera una pregunta de entrevista inteligente
   */
  async generateInterviewQuestion(
    role: string = 'desarrollador',
    difficulty: 'junior' | 'mid' | 'senior' = 'mid',
    category: 'technical' | 'behavioral' | 'situational' = 'technical'
  ): Promise<string> {
    if (!this.apiKey) {
      return this.getMockQuestion(category, difficulty)
    }

    try {
      const prompt = this.buildQuestionPrompt(role, difficulty, category)
      const response = await this.makeRequest(prompt)

      return this.extractTextFromResponse(response)
    } catch (error) {
      logger.error('Error generating question with Gemini:', error)
      return this.getMockQuestion(category, difficulty)
    }
  }

  /**
   * Eval√∫a la respuesta del usuario a una pregunta de entrevista
   */
  async evaluateInterviewResponse(
    question: string,
    userResponse: string,
    role: string = 'desarrollador'
  ): Promise<{
    score: number
    feedback: string
    strengths: string[]
    improvements: string[]
    technical_accuracy: number
    communication_clarity: number
    completeness: number
  }> {
    if (!this.apiKey) {
      return this.getMockEvaluation(userResponse)
    }

    try {
      const prompt = this.buildEvaluationPrompt(question, userResponse, role)
      const response = await this.makeRequest(prompt)

      return this.parseEvaluationResponse(this.extractTextFromResponse(response))
    } catch (error) {
      logger.error('Error evaluating response with Gemini:', error)
      return this.getMockEvaluation(userResponse)
    }
  }

  /**
   * Realiza la petici√≥n HTTP a Gemini API usando axios
   */
  private async makeRequest(prompt: string): Promise<GeminiResponse> {
    const url = `${this.baseUrl}/models/gemini-2.5-flash:generateContent?key=${this.apiKey}`

    logger.info('üåê Llamando a Gemini API:', {
      model: 'gemini-2.5-flash',
      promptLength: prompt.length,
      hasApiKey: !!this.apiKey
    })

    const payload = {
      contents: [{
        parts: [{
          text: prompt
        }]
      }],
      generationConfig: {
        temperature: 0.3, // Reducido de 0.7 a 0.3 para respuestas m√°s deterministas
        topK: 20, // Reducido de 40 a 20 para mayor precisi√≥n
        topP: 0.8, // Reducido de 0.95 a 0.8
        maxOutputTokens: 2048, // Aumentado de 1024 a 2048 para respuestas completas
      }
    }

    // Configurar agent HTTPS para ignorar certificados SSL (solo desarrollo)
    const httpsAgent = new https.Agent({
      rejectUnauthorized: false // Desactivar verificaci√≥n SSL completamente
    })

    try {
      const response = await axios.post<GeminiResponse>(url, payload, {
        headers: {
          'Content-Type': 'application/json',
        },
        httpsAgent,
        timeout: 60000 // 60 segundos - m√°s tiempo para Gemini
      })

      logger.info('‚úÖ Gemini API respuesta exitosa')
      return response.data

    } catch (error: any) {
      if (error.response) {
        // Error de respuesta del servidor
        logger.error('‚ùå Gemini API error:', {
          status: error.response.status,
          statusText: error.response.statusText,
          data: error.response.data
        })
        throw new Error(`Gemini API error: ${error.response.status} - ${JSON.stringify(error.response.data)}`)
      } else if (error.request) {
        // Error de conexi√≥n
        logger.error('‚ùå Error de conexi√≥n a Gemini API:', error.message)
        throw new Error(`Error de conexi√≥n a Gemini API: ${error.message}`)
      } else {
        // Otro tipo de error
        logger.error('‚ùå Error inesperado:', error.message)
        throw new Error(`Error inesperado: ${error.message}`)
      }
    }
  }

  /**
   * Extrae el texto de la respuesta de Gemini - MEJORADO para manejar diferentes formatos
   */
  private extractTextFromResponse(response: GeminiResponse): string {
    try {
      logger.info('üîç Analizando estructura de respuesta de Gemini...')

      if (!response || typeof response !== 'object') {
        logger.error('‚ùå Respuesta no es un objeto v√°lido')
        throw new Error('Respuesta inv√°lida de Gemini')
      }

      if (!response.candidates || response.candidates.length === 0) {
        logger.error('‚ùå No hay candidates en la respuesta')
        throw new Error('Respuesta vac√≠a de Gemini')
      }

      const candidate = response.candidates[0]

      if (!candidate || !candidate.content) {
        logger.error('‚ùå Candidate no tiene content')
        throw new Error('Candidate sin contenido')
      }

      // MANEJO MEJORADO: Verificar diferentes estructuras posibles con casting seguro
      let text = ''

      // Estructura 1: content como string directo
      if (typeof candidate.content === 'string') {
        text = candidate.content
        logger.info('‚úÖ Texto extra√≠do de content directo')
      }
      // Estructura 2: content como objeto
      else if (typeof candidate.content === 'object') {
        const contentObj = candidate.content as any // Casting seguro para manejo flexible

        // Formato 2a: content.parts[].text (formato esperado)
        if (contentObj.parts && Array.isArray(contentObj.parts) && contentObj.parts.length > 0) {
          text = contentObj.parts[0]?.text || ''
          logger.info('‚úÖ Texto extra√≠do de parts[0].text')
        }
        // Formato 2b: content.text (formato alternativo)
        else if (contentObj.text && typeof contentObj.text === 'string') {
          text = contentObj.text
          logger.info('‚úÖ Texto extra√≠do de content.text')
        }
        // Formato 2c: Buscar text en cualquier nivel
        else {
          logger.info('üîç Buscando text en estructura no est√°ndar...')
          const findText = (obj: any): string => {
            if (typeof obj === 'string') return obj
            if (typeof obj !== 'object' || obj === null) return ''

            if (obj.text && typeof obj.text === 'string') return obj.text

            for (const key in obj) {
              if (obj.hasOwnProperty(key)) {
                const result = findText(obj[key])
                if (result) return result
              }
            }
            return ''
          }

          text = findText(contentObj)
          if (text) {
            logger.info('‚úÖ Texto encontrado en b√∫squeda recursiva')
          }
        }
      }

      if (!text || text.trim().length === 0) {
        logger.error('‚ùå No se pudo extraer texto de la respuesta')
        logger.error('üìä Estructura de content:', JSON.stringify(candidate.content, null, 2))
        throw new Error('No se encontr√≥ texto en la respuesta')
      }

      logger.info('‚úÖ Texto extra√≠do exitosamente:', text.substring(0, 100) + '...')
      return text.trim()
    } catch (error) {
      logger.error('‚ùå Error extracting text from Gemini response:', error)
      throw error
    }
  }

  /**
   * Construye el prompt para generar preguntas
   */
  private buildQuestionPrompt(role: string, difficulty: string, category: string): string {
    return `Eres un experto reclutador de tecnolog√≠a. Genera UNA pregunta de entrevista para un ${role} nivel ${difficulty}.

Categor√≠a: ${category}
- Si es "technical": pregunta sobre conocimientos t√©cnicos, c√≥digo, arquitectura
- Si es "behavioral": pregunta sobre comportamiento, trabajo en equipo, liderazgo  
- Si es "situational": pregunta sobre situaciones hipot√©ticas, resoluci√≥n de problemas

Formato de respuesta: Solo la pregunta, sin introducci√≥n ni comentarios adicionales.

Ejemplos de buenas preguntas:
- Technical: "¬øC√≥mo implementar√≠as un sistema de cach√© para una aplicaci√≥n web de alto tr√°fico?"
- Behavioral: "Cu√©ntame sobre una vez que tuviste que resolver un conflicto con un compa√±ero de equipo"
- Situational: "¬øQu√© har√≠as si descubrieras un bug cr√≠tico en producci√≥n 5 minutos antes de una demo importante?"

Genera la pregunta:`
  }

  /**
   * Construye el prompt para evaluar respuestas
   */
  private buildEvaluationPrompt(question: string, response: string, role: string): string {
    return `Eres un experto evaluador de entrevistas t√©cnicas. Eval√∫a esta respuesta de candidato para ${role}.

PREGUNTA: "${question}"

RESPUESTA DEL CANDIDATO: "${response}"

Eval√∫a la respuesta usando estos criterios:
1. Precisi√≥n t√©cnica (1-10)
2. Claridad de comunicaci√≥n (1-10) 
3. Completitud de la respuesta (1-10)

Responde EXACTAMENTE en este formato JSON (sin comentarios adicionales):

{
  "score": [n√∫mero del 1-10],
  "feedback": "[feedback general en espa√±ol, m√°ximo 100 palabras]",
  "strengths": ["[fortaleza 1]", "[fortaleza 2]"],
  "improvements": ["[mejora 1]", "[mejora 2]"],
  "technical_accuracy": [n√∫mero 1-10],
  "communication_clarity": [n√∫mero 1-10],
  "completeness": [n√∫mero 1-10]
}`
  }

  /**
   * Parsea la respuesta de evaluaci√≥n JSON
   */
  private parseEvaluationResponse(response: string): any {
    try {
      // Extraer JSON de la respuesta
      const jsonMatch = response.match(/\{[\s\S]*\}/)
      if (jsonMatch) {
        return JSON.parse(jsonMatch[0])
      }
      throw new Error('No JSON found in response')
    } catch (error) {
      logger.error('Error parsing evaluation response:', error)
      return this.getMockEvaluation('')
    }
  }

  /**
   * Pregunta simulada para modo sin API
   */
  private getMockQuestion(category: string, difficulty: string): string {
    const questions = {
      technical: {
        junior: '¬øCu√°l es la diferencia entre let, const y var en JavaScript?',
        mid: '¬øC√≥mo implementar√≠as un sistema de autenticaci√≥n con JWT?',
        senior: '¬øC√≥mo dise√±ar√≠as la arquitectura de microservicios para una plataforma de e-commerce?'
      },
      behavioral: {
        junior: 'Describe una situaci√≥n donde tuviste que aprender una tecnolog√≠a nueva r√°pidamente',
        mid: 'Cu√©ntame sobre un proyecto desafiante en el que trabajaste y c√≥mo lo resolviste',
        senior: 'Describe c√≥mo has mentorizado a desarrolladores junior en tu experiencia'
      },
      situational: {
        junior: '¬øQu√© har√≠as si encuentras un bug en el c√≥digo de un compa√±ero?',
        mid: '¬øC√≥mo priorizar√≠as las tareas cuando tienes m√∫ltiples deadlines urgentes?',
        senior: '¬øC√≥mo manejar√≠as la migraci√≥n de una aplicaci√≥n legacy a tecnolog√≠as modernas?'
      }
    }

    return questions[category as keyof typeof questions][difficulty as keyof typeof questions.technical] ||
      'H√°blame sobre tu experiencia en desarrollo de software'
  }

  /**
   * Analiza la respuesta del usuario y determina si generar una pregunta de seguimiento
   */
  async analyzeResponseForFollowUp(
    originalQuestion: string,
    userResponse: string,
    interviewContext: {
      role: string
      currentQuestionIndex: number
      totalQuestions: number
      previousResponses: string[]
    }
  ): Promise<{
    shouldAskFollowUp: boolean
    followUpQuestion?: string
    reasoning: string
    interestingPoints: string[]
  }> {
    if (!this.apiKey) {
      return this.getMockFollowUpAnalysis(userResponse)
    }

    try {
      const prompt = this.buildFollowUpAnalysisPrompt(
        originalQuestion,
        userResponse,
        interviewContext
      )
      const response = await this.makeRequest(prompt)

      return this.parseFollowUpResponse(this.extractTextFromResponse(response))
    } catch (error) {
      logger.error('Error analyzing response for follow-up:', error)
      return this.getMockFollowUpAnalysis(userResponse)
    }
  }

  /**
   * Construye el prompt para analizar si hacer pregunta de seguimiento
   */
  private buildFollowUpAnalysisPrompt(
    originalQuestion: string,
    userResponse: string,
    context: any
  ): string {
    return `Eres una IA entrevistadora experta que analiza respuestas para decidir si hacer seguimiento.

PREGUNTA: "${originalQuestion}"
RESPUESTA: "${userResponse}"

AN√ÅLISIS:
- Si la respuesta es muy corta o vaga ‚Üí hacer seguimiento
- Si ya tiene suficiente detalle ‚Üí continuar
- Si menciona algo espec√≠fico interesante ‚Üí explorar m√°s

Tu pregunta de seguimiento debe ser espec√≠fica al contexto de lo que mencion√≥ el candidato, no gen√©rica.

Responde en JSON:
{
  "shouldAskFollowUp": true/false,
  "followUpQuestion": "pregunta espec√≠fica o null",
  "reasoning": "raz√≥n breve",
  "interestingPoints": ["aspectos relevantes"]
}`
  }

  /**
   * Parsea la respuesta de an√°lisis de seguimiento
   */
  private parseFollowUpResponse(response: string): any {
    try {
      const jsonMatch = response.match(/\{[\s\S]*\}/)
      if (jsonMatch) {
        return JSON.parse(jsonMatch[0])
      }
      throw new Error('No JSON found in response')
    } catch (error) {
      logger.error('Error parsing follow-up response:', error)
      return this.getMockFollowUpAnalysis('')
    }
  }

  /**
   * An√°lisis simulado para modo sin API - SIMPLE para no interferir con Gemini
   */
  private getMockFollowUpAnalysis(response: string): any {
    // Modo mock ultra-simple: NUNCA hacer seguimiento
    // Gemini real debe manejar toda la l√≥gica inteligente
    return {
      shouldAskFollowUp: false,
      followUpQuestion: null,
      reasoning: "Modo simulaci√≥n - Gemini real debe manejar el an√°lisis",
      interestingPoints: ["Respuesta recibida"]
    }
  }

  /**
   * Genera un comentario natural y emp√°tico sobre la respuesta del usuario
   */
  async generateNaturalComment(
    userResponse: string,
    questionContext: string,
    commentType: 'transition' | 'follow-up-intro' = 'transition'
  ): Promise<string> {
    if (!this.apiKey) {
      return this.getMockNaturalComment(userResponse, commentType)
    }

    try {
      const prompt = this.buildNaturalCommentPrompt(userResponse, questionContext, commentType)
      const response = await this.makeRequest(prompt)

      return this.extractTextFromResponse(response).trim()
    } catch (error) {
      logger.error('Error generating natural comment:', error)
      return this.getMockNaturalComment(userResponse, commentType)
    }
  }

  /**
   * Construye el prompt para generar comentarios naturales
   */
  private buildNaturalCommentPrompt(
    userResponse: string,
    questionContext: string,
    commentType: string
  ): string {
    const typeInstruction = commentType === 'follow-up-intro'
      ? 'Genera una introducci√≥n natural antes de hacer una pregunta de seguimiento'
      : 'Genera un comentario de transici√≥n emp√°tico antes de pasar a la siguiente pregunta'

    return `Eres una entrevistadora virtual emp√°tica y profesional. ${typeInstruction}.

CONTEXTO DE LA PREGUNTA: "${questionContext}"
RESPUESTA DEL USUARIO: "${userResponse}"

INSTRUCCIONES:
- Genera UN comentario corto (m√°ximo 15 palabras)
- Debe sonar natural, emp√°tico y profesional
- Debe reflejar que realmente escuchaste y entendiste la respuesta
- Menciona algo espec√≠fico que el usuario dijo
- Usa un tono conversacional, como si fueras una persona real
- Evita ser gen√©rico o rob√≥tico

EJEMPLOS DE BUENOS COMENTARIOS:
- "Qu√© interesante tu experiencia con Django para desarrollo web"
- "Me gusta que combines an√°lisis de datos con desarrollo"
- "Veo que tienes buena experiencia en automatizaci√≥n con Python"
- "Perfecto, dominas un stack muy s√≥lido para desarrollo web"

Genera SOLO el comentario, sin explicaciones adicionales:`
  }

  /**
   * Genera comentarios naturales simulados para modo sin API
   */
  private getMockNaturalComment(response: string, commentType: string): string {
    const lowerResponse = response.toLowerCase()
    const isJuniorProfile = /\b(reci√©n|egresado|graduado|sin experiencia|junior|estudiante|instituci√≥n|universidad|peque√±os)\b/i.test(lowerResponse)

    if (commentType === 'follow-up-intro') {
      if (isJuniorProfile) {
        if (lowerResponse.includes('machine learning')) {
          return "Qu√© interesante tu experiencia con machine learning"
        } else if (lowerResponse.includes('paginas web') || lowerResponse.includes('web')) {
          return "Valioso tu trabajo en desarrollo web"
        } else if (lowerResponse.includes('qa')) {
          return "Excelente que hayas explorado el √°rea de QA"
        } else {
          return "Me parecen valiosos esos proyectos acad√©micos"
        }
      } else if (lowerResponse.includes('python') && lowerResponse.includes('django')) {
        return "Interesante combinaci√≥n de Python y Django"
      } else if (lowerResponse.includes('datos') || lowerResponse.includes('an√°lisis')) {
        return "Me llama la atenci√≥n tu trabajo con datos"
      } else if (lowerResponse.includes('automatizaci√≥n') || lowerResponse.includes('automatizar')) {
        return "Qu√© valioso tu enfoque en automatizaci√≥n"
      } else {
        return "Me parece interesante lo que comentas"
      }
    } else {
      // Comentarios de transici√≥n m√°s espec√≠ficos y emp√°ticos
      if (isJuniorProfile) {
        if (lowerResponse.includes('machine learning')) {
          return "Impresionante tu experiencia con ML como estudiante"
        } else if (lowerResponse.includes('paginas web') || lowerResponse.includes('web')) {
          return "Excelente base en desarrollo web"
        } else if (lowerResponse.includes('qa')) {
          return "Muy buena experiencia en testing y QA"
        } else if (lowerResponse.includes('proyecto')) {
          return "Valiosos esos proyectos para tu formaci√≥n"
        } else {
          return "Perfecto, entiendo tu perfil como reci√©n egresado"
        }
      } else if (lowerResponse.includes('python') && lowerResponse.includes('django')) {
        return "Excelente stack con Python y Django"
      } else if (lowerResponse.includes('javascript') && lowerResponse.includes('python')) {
        return "Muy buena combinaci√≥n de tecnolog√≠as"
      } else if (lowerResponse.includes('datos') || lowerResponse.includes('an√°lisis')) {
        return "Me gusta mucho tu enfoque hacia los datos"
      } else if (lowerResponse.includes('automatizaci√≥n') || lowerResponse.includes('automatizar')) {
        return "Valioso tu trabajo en automatizaci√≥n"
      } else if (lowerResponse.includes('empresa') || lowerResponse.includes('proyecto')) {
        return "Interesante tu experiencia profesional"
      } else if (lowerResponse.includes('aprender') || lowerResponse.includes('intermedio')) {
        return "Me gusta tu honestidad y ganas de crecer"
      } else {
        return "Perfecto, entiendo tu experiencia"
      }
    }
  }

  /**
   * Evaluaci√≥n simulada para modo sin API
   */
  private getMockEvaluation(response: string): any {
    const wordCount = response.split(' ').length
    const baseScore = Math.min(10, Math.max(1, Math.floor(wordCount / 10)))

    return {
      score: baseScore,
      feedback: 'Respuesta clara y bien estructurada. Se nota conocimiento del tema.',
      strengths: [
        'Comunicaci√≥n clara y directa',
        'Demuestra conocimiento t√©cnico'
      ],
      improvements: [
        'Podr√≠a agregar m√°s ejemplos espec√≠ficos',
        'Considerar aspectos de escalabilidad'
      ],
      technical_accuracy: baseScore,
      communication_clarity: Math.min(10, baseScore + 1),
      completeness: Math.max(1, baseScore - 1)
    }
  }

  /**
   * NUEVO: Zavi se presenta y da la bienvenida
   */
  async generateWelcomeMessage(): Promise<string> {
    logger.info('üëã generateWelcomeMessage - API Key presente:', !!this.apiKey)

    if (!this.apiKey) {
      logger.warn('‚ö†Ô∏è Usando mock para welcome message')
      return "¬°Hola! Soy Zavi, tu entrevistadora virtual. Me da mucho gusto conocerte y estoy muy emocionada de realizar esta entrevista contigo."
    }

    try {
      logger.info('üéØ Generando welcome message con Gemini...')
      const prompt = `Eres Zavi, una entrevistadora virtual profesional y emp√°tica.

INSTRUCCIONES MUY CLARAS:
1. Pres√©ntate como "Zavi, tu entrevistadora virtual"
2. Da una bienvenida c√°lida y profesional al candidato
3. Usa un tono emp√°tico y motivador
4. Menciona que est√°s emocionada de conocerlo
5. Haz que se sienta c√≥modo y bienvenido
6. Escribe 3-4 oraciones completas
7. NO uses palabras como "model", "AI", "sistema"
8. Responde SOLO con el mensaje de bienvenida, SIN prefijos ni etiquetas

EJEMPLO del tipo de respuesta que necesito:
"¬°Hola! Soy Zavi, tu entrevistadora virtual. Me da mucho gusto conocerte y estoy muy emocionada de realizar esta entrevista contigo. Mi objetivo es crear un ambiente c√≥modo donde puedas compartir tu experiencia. ¬°Estoy lista para comenzar cuando t√∫ lo est√©s!"

AHORA genera TU mensaje de bienvenida siguiendo este estilo:`

      const response = await this.makeRequest(prompt)
      const message = this.extractTextFromResponse(response).trim()

      // Validaci√≥n adicional para evitar respuestas problem√°ticas
      if (message.toLowerCase().includes('model') || message.length < 20 || message.toLowerCase().includes('como ai')) {
        logger.warn('‚ö†Ô∏è Respuesta de Gemini problem√°tica, usando fallback')
        return "¬°Hola! Soy Zavi, tu entrevistadora virtual. Me da mucho gusto conocerte y estoy muy emocionada de realizar esta entrevista contigo. Mi objetivo es crear un ambiente c√≥modo donde puedas compartir tu experiencia y mostrar tu talento. ¬°Estoy lista para comenzar cuando t√∫ lo est√©s!"
      }

      logger.info('‚úÖ Welcome message generado exitosamente:', message.substring(0, 60) + '...')
      return message
    } catch (error) {
      logger.error('‚ùå Error generating welcome:', error)
      return "¬°Hola! Soy Zavi, tu entrevistadora virtual. Me da mucho gusto conocerte y estoy muy emocionada de realizar esta entrevista contigo. Mi objetivo es crear un ambiente c√≥modo donde puedas compartir tu experiencia y mostrar tu talento. ¬°Estoy lista para comenzar cuando t√∫ lo est√©s!"
    }
  }

  /**
   * NUEVO: Zavi explica c√≥mo ser√° la entrevista
   */
  async generateInterviewExplanation(): Promise<string> {
    if (!this.apiKey) {
      return "Te explico c√≥mo funcionar√°: Tendremos una conversaci√≥n donde te har√© 5 preguntas clave. Luego podr√°s hacerme preguntas a m√≠. Al final recibir√°s retroalimentaci√≥n detallada."
    }

    try {
      const prompt = `Eres Zavi, la entrevistadora virtual que ya se present√≥ al candidato.

TAREA: Explicar c√≥mo funcionar√° la entrevista de forma clara y motivadora.

ESTRUCTURA DE LA ENTREVISTA:
1. 5 preguntas que t√∫ har√°s al candidato
2. El candidato puede hacerte preguntas sobre la empresa/posici√≥n
3. Despedida y evaluaci√≥n final

INSTRUCCIONES ESPEC√çFICAS:
- NO te presentes de nuevo, NO digas "Hola" ni "Soy Zavi"
- Explica las 3 fases de forma clara y directa
- Usa 3-4 oraciones completas
- S√© motivadora y positiva
- Menciona que ser√° una conversaci√≥n natural
- NO uses palabras como "model", "AI", "sistema"

EJEMPLO del tipo de respuesta necesaria:
"Te explico c√≥mo funcionar√° nuestra entrevista: Primero, te har√© 5 preguntas para conocer tu experiencia y habilidades. Despu√©s, tendr√°s la oportunidad de hacerme preguntas sobre la empresa y el puesto. Al final, procesar√© toda la informaci√≥n para darte retroalimentaci√≥n valiosa."

AHORA genera TU explicaci√≥n siguiendo este estilo:`

      const response = await this.makeRequest(prompt)
      const message = this.extractTextFromResponse(response).trim()

      // Validaci√≥n para evitar respuestas problem√°ticas
      if (message.toLowerCase().includes('model') || message.length < 20) {
        logger.warn('‚ö†Ô∏è Respuesta de explicaci√≥n problem√°tica, usando fallback')
        return "Te explico c√≥mo funcionar√° nuestra entrevista: Primero, te har√© 5 preguntas para conocer tu experiencia y habilidades. Despu√©s, tendr√°s la oportunidad de hacerme preguntas sobre la empresa y el puesto. Al final, procesar√© toda la informaci√≥n para darte retroalimentaci√≥n valiosa sobre tu desempe√±o."
      }

      return message
    } catch (error) {
      logger.error('Error generating explanation:', error)
      return "Te explico c√≥mo funcionar√° nuestra entrevista: Primero, te har√© 5 preguntas para conocer tu experiencia y habilidades. Despu√©s, tendr√°s la oportunidad de hacerme preguntas sobre la empresa y el puesto. Al final, procesar√© toda la informaci√≥n para darte retroalimentaci√≥n valiosa sobre tu desempe√±o."
    }
  }

  /**
   * NUEVO: Zavi genera la primera pregunta de entrevista
   */
  async generateFirstQuestion(): Promise<string> {
    if (!this.apiKey) {
      return "Para comenzar, cu√©ntame sobre ti y tu experiencia m√°s relevante."
    }

    try {
      const prompt = `Eres Zavi, la entrevistadora virtual que ya explic√≥ el proceso.

TAREA: Generar la PRIMERA pregunta de entrevista para que el candidato se presente.

INSTRUCCIONES ESPEC√çFICAS:
- NO te presentes de nuevo, NO digas "Hola" ni "Soy Zavi"
- Haz una pregunta abierta sobre su experiencia y trayectoria
- Invita al candidato a presentarse de forma natural
- Usa un tono conversacional y cercano
- La pregunta debe ser de 2-3 oraciones m√°ximo
- NO uses palabras como "model", "AI", "sistema"
- Transmite inter√©s genuino en conocerlo

EJEMPLOS de buenas primeras preguntas:
"Para comenzar, me encantar√≠a conocerte mejor. Cu√©ntame sobre tu trayectoria profesional y qu√© te ha tra√≠do hasta este punto."
"Empecemos por ti. ¬øPodr√≠as compartirme tu experiencia y qu√© es lo que m√°s te apasiona de tu √°rea?"

AHORA genera TU primera pregunta siguiendo este estilo:`

      const response = await this.makeRequest(prompt)
      const message = this.extractTextFromResponse(response).trim()

      // Validaci√≥n para evitar respuestas problem√°ticas
      if (message.toLowerCase().includes('model') || message.length < 15) {
        logger.warn('‚ö†Ô∏è Primera pregunta problem√°tica, usando fallback')
        return "Para comenzar, me encantar√≠a conocerte mejor. Cu√©ntame sobre tu trayectoria profesional, las experiencias que te han marcado y qu√© es lo que m√°s te apasiona de tu √°rea de trabajo."
      }

      return message
    } catch (error) {
      logger.error('Error generating first question:', error)
      return "Para comenzar, me encantar√≠a conocerte mejor. Cu√©ntame sobre tu trayectoria profesional, las experiencias que te han marcado y qu√© es lo que m√°s te apasiona de tu √°rea de trabajo."
    }
  }

  /**
   * NUEVO: Zavi analiza la respuesta y genera comentario + siguiente acci√≥n
   * GEMINI ES EL PROTAGONISTA - Fallback solo en caso de error real
   */
  async analyzeAndRespond(context: {
    userResponse: string
    currentQuestion: string
    questionNumber: number
    totalQuestions: number
    conversationHistory: Array<{ role: 'assistant' | 'user', content: string }>
  }): Promise<{
    comment: string
    shouldAskFollowUp: boolean
    followUpQuestion?: string
    shouldContinueToNext: boolean
    nextQuestion?: string
    reasoning: string
  }> {
    if (!this.apiKey) {
      logger.error('‚ùå No API key configurada')
      return this.generateSimpleResponse(context)
    }

    // INTENTAR M√öLTIPLES VECES CON GEMINI antes de rendirse
    let lastError: any = null
    for (let attempt = 1; attempt <= 3; attempt++) {
      try {
        logger.info(`üéØ Intento ${attempt}/3: Usando Gemini para an√°lisis completo...`)
        const prompt = this.buildAnalyzeAndRespondPrompt(context)
        const response = await this.makeRequest(prompt)
        const text = this.extractTextFromResponse(response)
        const parsed = this.parseAnalyzeAndRespondResponse(text)

        // Validar que la respuesta sea coherente
        if (!parsed.comment || parsed.comment.length < 10) {
          throw new Error('Respuesta de Gemini incompleta')
        }

        // üö® VALIDACI√ìN FORZADA: Si estamos en pregunta 5 y Gemini gener√≥ nextQuestion, ELIMINARLO
        if (context.questionNumber === 5 && parsed.nextQuestion && parsed.nextQuestion !== 'null') {
          logger.warn('‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è GEMINI IGNOR√ì INSTRUCCIONES - Gener√≥ nextQuestion en pregunta 5')
          logger.warn('üîß FORZANDO nextQuestion = null')
          parsed.nextQuestion = null
          parsed.reasoning = '√∫ltima pregunta (forzado)'
        }

        logger.info('‚úÖ Gemini respondi√≥ exitosamente')
        return parsed

      } catch (error) {
        lastError = error
        logger.error(`‚ùå Intento ${attempt}/3 fall√≥:`, error)

        // Si no es el √∫ltimo intento, esperar un poco antes de reintentar
        if (attempt < 3) {
          await new Promise(resolve => setTimeout(resolve, 1000))
        }
      }
    }

    // Solo despu√©s de 3 intentos fallidos, usar fallback
    logger.error('‚ùå‚ùå‚ùå GEMINI FALL√ì DESPU√âS DE 3 INTENTOS ‚ùå‚ùå‚ùå')
    logger.error('√öltimo error:', lastError)
    return this.generateSimpleResponse(context)
  }

  /**
   * Sistema de emergencia M√çNIMO - Solo se usa cuando Gemini realmente falla
   * NO debe competir con Gemini, solo proporcionar un fallback b√°sico
   */
  private generateSimpleResponse(context: any): any {
    logger.error('‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è USANDO FALLBACK DE EMERGENCIA - GEMINI FALL√ì ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è')

    // Fallback ultra-b√°sico solo para que la entrevista no se rompa
    return {
      comment: "Entiendo. Cu√©ntame m√°s sobre eso.",
      shouldAskFollowUp: false,
      followUpQuestion: null,
      shouldContinueToNext: true,
      nextQuestion: "¬øPodr√≠as contarme m√°s sobre tu experiencia profesional?",
      reasoning: "fallback de emergencia - Gemini fall√≥"
    }
  }

  private buildAnalyzeAndRespondPrompt(context: any): string {
    const conversationSummary = context.conversationHistory
      .slice(-6) // √öltimos 6 mensajes para contexto
      .map((msg: any) => `${msg.role === 'assistant' ? 'Zavi' : 'Candidato'}: ${msg.content}`)
      .join('\n')

    // Advertencia cr√≠tica si estamos en pregunta 4+
    const criticalWarning = context.questionNumber >= 4
      ? `\n‚ö†Ô∏è CR√çTICO: Est√°s en pregunta ${context.questionNumber} de ${context.totalQuestions}. PROHIBIDO hacer followUpQuestion. SOLO genera nextQuestion y deja que el usuario responda.`
      : ''

    // Advertencia especial para pregunta 5 - ULTRA SIMPLIFICADA
    const question5Warning = context.questionNumber === 5
      ? `\n
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üö® PREGUNTA 5 - √öLTIMA PREGUNTA - NO GENERES M√ÅS PREGUNTAS üö®
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

REGLA √öNICA PARA PREGUNTA 5:

"nextQuestion" DEBE SER null (NO escribas ninguna pregunta)

FORMATO OBLIGATORIO:
{
  "comment": "comentario sobre lo que dijo (30-50 palabras)",
  "shouldAskFollowUp": false,
  "followUpQuestion": null,
  "shouldContinueToNext": true,
  "nextQuestion": null,
  "reasoning": "√∫ltima pregunta"
}

PROHIBIDO: "¬øCu√°l consideras...", "¬øPodr√≠as...", "Ahora...", "Para finalizar..."
CORRECTO: null

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê`
      : ''

    return `Eres Zavi, una entrevistadora virtual profesional y emp√°tica.

CONTEXTO DE LA CONVERSACI√ìN:
${conversationSummary}

RESPUESTA ACTUAL DEL CANDIDATO: "${context.userResponse}"
PREGUNTA N√öMERO: ${context.questionNumber} de ${context.totalQuestions}${criticalWarning}${question5Warning}

INSTRUCCIONES CLARAS:
1. Lee y analiza espec√≠ficamente la respuesta del candidato
2. Genera un comentario emp√°tico que muestre que entendiste su respuesta
3. Menciona algo espec√≠fico que el candidato dijo (proyectos, tecnolog√≠as, experiencias)
4. Usa frases como "veo que...", "me parece interesante...", "qu√© bueno que..."
5. S√© conversacional y natural, como una entrevistadora real
6. ‚ö†Ô∏è NUNCA hagas pregunta de seguimiento (shouldAskFollowUp SIEMPRE debe ser false)
7. ‚ö†Ô∏è SIEMPRE espera que el usuario responda antes de continuar - UNA sola pregunta a la vez
8. ‚ö†Ô∏è Si est√°s en pregunta 5, tu "comment" SOLO comenta la respuesta actual - NO invites a hacer preguntas, NO des gracias, NO digas "hemos terminado"

FORMATO DE RESPUESTA - SOLO JSON:

üö® SI EST√ÅS EN PREGUNTA 5 (√öLTIMA) - nextQuestion DEBE SER null:
{
  "comment": "Me gusta c√≥mo combinas documentaci√≥n oficial con videos pr√°cticos para mantenerte actualizado.",
  "shouldAskFollowUp": false,
  "followUpQuestion": null,
  "shouldContinueToNext": true,
  "nextQuestion": null,
  "reasoning": "√∫ltima pregunta completada"
}

‚ùå RESPUESTA INCORRECTA PARA PREGUNTA 5:
{
  "comment": "Interesante.",
  "nextQuestion": "Ahora, pensando en tu experiencia..."  <-- ¬°PROHIBIDO!
}

‚ùå TAMBI√âN INCORRECTO:
{
  "comment": "Gracias por compartir. Hemos cubierto todos los puntos.",
  "nextQuestion": null
}

‚úÖ RESPUESTA CORRECTA PARA PREGUNTA 5:
{
  "comment": "Veo que priorizas fuentes oficiales y la pr√°ctica constante. Me parece un enfoque muy s√≥lido.",
  "shouldAskFollowUp": false,
  "followUpQuestion": null,
  "shouldContinueToNext": true,
  "nextQuestion": null,
  "reasoning": "√∫ltima pregunta completada"
}

SI EST√ÅS EN PREGUNTA 1-4 (nextQuestion es una nueva pregunta):
{
  "comment": "comentario espec√≠fico sobre lo que dijo el candidato (40-60 palabras)",
  "shouldAskFollowUp": false,
  "followUpQuestion": null,
  "shouldContinueToNext": true,
  "nextQuestion": "siguiente pregunta relevante para entrevista",
  "reasoning": "continuar con nueva pregunta"
}

EJEMPLOS DE BUENOS COMENTARIOS:
- Si habla de SAP: "Qu√© interesante tu experiencia con integraciones SAP, es un sistema muy complejo"
- Si habla de migraci√≥n: "Me gusta c√≥mo identificaste los problemas en el sistema anterior y propusiste una soluci√≥n"
- Si habla de datos: "Veo que tienes buen ojo para la calidad de datos, eso es muy valioso"

IMPORTANTE: Responde SOLO con el JSON, sin markdown ni explicaciones.`
  }

  private parseAnalyzeAndRespondResponse(response: string): any {
    try {
      logger.info('üîç Parseando respuesta de Gemini...')
      logger.info('üìù Respuesta completa (primeros 300 chars):', response.substring(0, 300))

      // Limpiar la respuesta m√°s agresivamente
      let cleanedResponse = response
        .replace(/```json/gi, '')
        .replace(/```/g, '')
        .replace(/^\s*[\r\n]+/gm, '') // Remover l√≠neas vac√≠as
        .replace(/^[^{]*/g, '') // Remover todo antes del primer {
        .replace(/[^}]*$/g, '') // Remover todo despu√©s del √∫ltimo }
        .trim()

      // Buscar el JSON de forma m√°s flexible
      let jsonMatch = cleanedResponse.match(/\{[\s\S]*\}/)
      if (!jsonMatch) {
        // Buscar de forma m√°s amplia
        jsonMatch = response.match(/\{[^}]*"comment"[^}]*\}/gi)
      }

      if (jsonMatch) {
        const jsonStr = jsonMatch[0]
        logger.info('‚úÖ JSON encontrado:', jsonStr.substring(0, 200) + '...')

        try {
          const parsed = JSON.parse(jsonStr)

          // Validar que tenemos los campos esenciales
          if (!parsed.comment && !parsed.nextQuestion) {
            throw new Error('JSON sin campos esenciales')
          }

          // Limpiar y validar los campos
          if (parsed.comment) {
            let cleanedComment = parsed.comment
              .replace(/[\{\}]/g, '') // Remover llaves
              .replace(/^["']+|["']+$/g, '') // Remover comillas al inicio/final
              .replace(/\n/g, ' ') // Remover saltos de l√≠nea
              .replace(/^comment:\s*/i, '') // Remover prefijo "comment:"
              .trim()

            // DETECTAR si el comment contiene TODO el JSON (Gemini lo puso mal)
            if (cleanedComment.includes('"comment"') ||
              cleanedComment.includes('"nextQuestion"') ||
              cleanedComment.includes('"shouldAskFollowUp"')) {
              logger.warn('‚ö†Ô∏è Comment contiene JSON completo, rechazando:', cleanedComment.substring(0, 100))
              throw new Error('Comment contiene JSON - respuesta malformada')
            }

            parsed.comment = cleanedComment

            // DETECTAR RESPUESTAS INCOMPLETAS - si termina cortada, rechazar
            if (parsed.comment.endsWith('algo') ||
              parsed.comment.endsWith('de') ||
              parsed.comment.endsWith('la') ||
              parsed.comment.endsWith('el') ||
              parsed.comment.endsWith('si') ||
              parsed.comment.endsWith('un') ||
              parsed.comment.endsWith('una') ||
              parsed.comment.endsWith('en') ||
              parsed.comment.endsWith('con') ||
              parsed.comment.endsWith('para') ||
              parsed.comment.length < 30) {
              logger.warn('‚ö†Ô∏è Comentario incompleto detectado:', parsed.comment)
              throw new Error('Respuesta incompleta de Gemini')
            }
          }

          if (parsed.nextQuestion) {
            parsed.nextQuestion = parsed.nextQuestion
              .replace(/[\{\}]/g, '')
              .replace(/^["']+|["']+$/g, '')
              .trim()

            // Validar que la pregunta est√© completa
            if (parsed.nextQuestion.length < 20) {
              logger.warn('‚ö†Ô∏è Pregunta incompleta detectada:', parsed.nextQuestion)
              throw new Error('Pregunta incompleta de Gemini')
            }
          }

          // Asegurar que tenemos todos los campos necesarios
          parsed.shouldAskFollowUp = parsed.shouldAskFollowUp || false
          parsed.followUpQuestion = parsed.followUpQuestion || null
          parsed.shouldContinueToNext = parsed.shouldContinueToNext !== false
          parsed.reasoning = parsed.reasoning || "an√°lisis de Gemini"

          logger.info('‚úÖ Respuesta parseada exitosamente:', {
            comment: parsed.comment?.substring(0, 50) + '...',
            hasNextQuestion: !!parsed.nextQuestion
          })

          return parsed

        } catch (parseError) {
          logger.error('‚ùå Error parseando JSON:', parseError)
          throw parseError
        }
      }

      // Si no encontramos JSON, intentar extraer datos de la respuesta conversacional
      logger.warn('‚ö†Ô∏è No se encontr√≥ JSON, intentando extraer datos conversacionales...')

      const conversationalResponse = this.convertConversationalToJSON(response)
      if (conversationalResponse) {
        logger.info('‚úÖ Respuesta conversacional convertida a JSON')
        return conversationalResponse
      }

      logger.error('‚ùå No se encontr√≥ JSON v√°lido ni contenido conversacional √∫til')
      throw new Error('No JSON found')

    } catch (error) {
      logger.error('‚ùå Error en parseAnalyzeAndRespondResponse:', error)
      throw error
    }
  }

  /**
   * Convierte una respuesta conversacional de Gemini a nuestro formato JSON
   */
  private convertConversationalToJSON(response: string): any | null {
    try {
      if (!response || response.length < 10) {
        return null
      }

      // Extraer comentario inteligente de la respuesta
      let comment = response.trim()

      // Limpiar texto com√∫n de respuestas de IA
      comment = comment
        .replace(/^(Como|Eres|Soy|Zavi)/i, '')
        .replace(/entrevistadora/gi, '')
        .replace(/virtual/gi, '')
        .replace(/profesional/gi, '')
        .trim()

      // Si es muy largo, tomar las primeras oraciones
      const sentences = comment.split(/[.!?]+/)
      if (sentences.length > 2) {
        comment = sentences.slice(0, 2).join('. ').trim() + '.'
      }

      // Si est√° vac√≠o o es muy corto, usar fallback
      if (comment.length < 10) {
        comment = "Muy interesante tu experiencia."
      }

      // Generar pregunta de seguimiento b√°sica
      const nextQuestion = "¬øPodr√≠as contarme m√°s detalles sobre ese proyecto que mencionaste?"

      return {
        comment: comment,
        shouldAskFollowUp: false,
        followUpQuestion: null,
        shouldContinueToNext: true,
        nextQuestion: nextQuestion,
        reasoning: "Respuesta conversacional convertida"
      }

    } catch (error) {
      logger.error('‚ùå Error convirtiendo respuesta conversacional:', error)
      return null
    }
  }

  /**
   * Genera una respuesta de fallback cuando Gemini no devuelve JSON v√°lido
   */
  private generateFallbackResponse(originalResponse: string): any {
    // Analizar la respuesta para extraer comentario relevante
    const comment = this.extractCommentFromResponse(originalResponse)

    return {
      comment: comment,
      shouldAskFollowUp: false,
      followUpQuestion: null,
      shouldContinueToNext: true,
      nextQuestion: "¬øPodr√≠as contarme m√°s sobre tu experiencia trabajando en proyectos colaborativos y c√≥mo manejas los desaf√≠os t√©cnicos?",
      reasoning: "Fallback debido a respuesta no estructurada"
    }
  }

  /**
   * Extrae un comentario relevante de una respuesta no estructurada
   */
  private extractCommentFromResponse(response: string): string {
    // Si la respuesta tiene contenido √∫til, usarla
    if (response && response.length > 20) {
      // Limpiar y tomar una parte relevante
      const cleaned = response
        .replace(/```json|```/g, '')
        .replace(/^\{|\}$/g, '')
        .replace(/"/g, '')
        .replace(/comment:\s*/i, '')
        .trim()
        .substring(0, 150)

      if (cleaned.length > 20 && !cleaned.includes('shouldAskFollowUp') && !cleaned.includes('nextQuestion')) {
        return `Entiendo tu punto de vista. ${cleaned.split('.')[0]}.`
      }
    }

    // Fallback gen√©rico m√°s profesional
    return "Muy interesante lo que comentas. Me parece valioso todo lo que has compartido hasta el momento."
  }



  /**
   * NUEVO: Zavi responde preguntas del candidato
   */
  async answerCandidateQuestion(question: string, context: {
    conversationHistory: Array<{ role: 'assistant' | 'user', content: string }>
  }): Promise<string> {
    if (!this.apiKey) {
      return "Esa es una excelente pregunta. En nuestra empresa valoramos el desarrollo profesional y ofrecemos oportunidades de crecimiento."
    }

    try {
      const conversationContext = context.conversationHistory
        .slice(-6) // √öltimos 6 mensajes
        .map(msg => `${msg.role === 'assistant' ? 'Zavi' : 'Candidato'}: ${msg.content}`)
        .join('\n')

      const prompt = `Eres Zavi, una entrevistadora virtual experta de una empresa innovadora.

CONTEXTO RECIENTE:
${conversationContext}

PREGUNTA DEL CANDIDATO: "${question}"

TAREA: Responder la pregunta del candidato de manera profesional, completa y √∫til.

INFORMACI√ìN SOBRE LA EMPRESA/POSICI√ìN:
- Empresa innovadora en crecimiento
- Se valora la innovaci√≥n, creatividad y el aprendizaje continuo
- Ambiente colaborativo, inclusivo y flexible
- M√∫ltiples oportunidades de desarrollo profesional y capacitaci√≥n
- Proyectos desafiantes y tecnolog√≠a de vanguardia
- Trabajo h√≠brido/remoto disponible
- Cultura de feedback y mentor√≠a
- Beneficios competitivos y balance vida-trabajo

INSTRUCCIONES CR√çTICAS:
- Responde de manera honesta, profesional y COMPLETA (60-80 palabras M√çNIMO)
- Tu respuesta DEBE terminar con un punto final (.) - NO la cortes a la mitad
- S√© espec√≠fica y detallada en tu respuesta
- Si no tienes informaci√≥n exacta, menciona que el equipo de RRHH puede proporcionar m√°s detalles
- Usa un tono conversacional y cercano
- Demuestra entusiasmo por la empresa y oportunidad
- IMPORTANTE: Completa todas las oraciones, NO dejes frases cortadas

Genera SOLO la respuesta completa (m√≠nimo 60 palabras):`

      const response = await this.makeRequest(prompt)
      const answer = this.extractTextFromResponse(response).trim()

      // Validar que la respuesta est√© completa (no termine con preposici√≥n o palabra cortada)
      if (answer.length < 50 ||
        answer.endsWith('de') ||
        answer.endsWith('la') ||
        answer.endsWith('el') ||
        answer.endsWith('en') ||
        !answer.endsWith('.') && !answer.endsWith('!') && !answer.endsWith('?')) {
        logger.warn('‚ö†Ô∏è Respuesta incompleta, usando fallback:', answer)
        return "Esa es una excelente pregunta. En este rol, tendr√°s la oportunidad de trabajar en proyectos innovadores con tecnolog√≠a de vanguardia. Valoramos el desarrollo profesional continuo y ofrecemos un ambiente colaborativo donde podr√°s crecer. El equipo de RRHH podr√° darte m√°s detalles espec√≠ficos sobre beneficios y compensaci√≥n. ¬øTienes alguna otra pregunta?"
      }

      return answer
    } catch (error) {
      logger.error('Error answering candidate question:', error)
      return "Esa es una excelente pregunta. En nuestra empresa valoramos el desarrollo profesional y ofrecemos oportunidades de crecimiento."
    }
  }

  /**
   * NUEVO: Zavi genera mensaje de transici√≥n a fase de preguntas del candidato
   */
  async generateTransitionToQuestionsPhase(context: {
    conversationHistory: Array<{ role: 'assistant' | 'user', content: string }>
  }): Promise<string> {
    if (!this.apiKey) {
      return "Perfecto, hemos terminado con mis preguntas. Ahora es tu turno, ¬øtienes alguna pregunta para m√≠ sobre la posici√≥n o la empresa?"
    }

    try {
      const prompt = `Eres Zavi, una entrevistadora virtual que acaba de terminar de hacer 5 preguntas al candidato.

TAREA: Hacer la transici√≥n a la fase donde el candidato puede hacerte preguntas.

INSTRUCCIONES:
- Felicita brevemente al candidato por completar las preguntas
- Invita al candidato a hacer preguntas sobre la empresa/posici√≥n
- S√© c√°lida y abierta
- M√°ximo 3 oraciones

Genera SOLO el mensaje de transici√≥n:`

      const response = await this.makeRequest(prompt)
      return this.extractTextFromResponse(response).trim()
    } catch (error) {
      logger.error('Error generating transition:', error)
      return "Perfecto, hemos terminado con mis preguntas. Ahora es tu turno, ¬øtienes alguna pregunta para m√≠ sobre la posici√≥n o la empresa?"
    }
  }

  /**
   * NUEVO: Zavi se despide
   */
  async generateFarewellMessage(context: {
    conversationHistory: Array<{ role: 'assistant' | 'user', content: string }>
  }): Promise<string> {
    if (!this.apiKey) {
      return "¬°Excelente! Muchas gracias por tu tiempo y tus respuestas. Fue un placer conversar contigo. Procesar√© toda la informaci√≥n para generar tu evaluaci√≥n personalizada. ¬°Mucho √©xito!"
    }

    try {
      const prompt = `Eres Zavi, una entrevistadora virtual que est√° terminando una entrevista exitosa.

TAREA: Despedirte del candidato de manera profesional y c√°lida.

INSTRUCCIONES:
- Agradece el tiempo y participaci√≥n
- Menciona que generar√°s una evaluaci√≥n
- S√© positiva y motivadora
- M√°ximo 3 oraciones

Genera SOLO el mensaje de despedida:`

      const response = await this.makeRequest(prompt)
      return this.extractTextFromResponse(response).trim()
    } catch (error) {
      logger.error('Error generating farewell:', error)
      return "¬°Excelente! Muchas gracias por tu tiempo y tus respuestas. Fue un placer conversar contigo. Procesar√© toda la informaci√≥n para generar tu evaluaci√≥n personalizada. ¬°Mucho √©xito!"
    }
  }
}

// Instancia singleton
export const geminiService = new GeminiService()