openapi: 3.0.3
info:
  title: InterviewAI API
  description: |
    API REST para la plataforma InterviewAI - Simulación de entrevistas con inteligencia artificial.
    
    Esta API proporciona endpoints para:
    - Autenticación de usuarios
    - Gestión de entrevistas
    - Manejo de preguntas y respuestas
    - Integración con servicios de IA (feedback, STT, TTS)
    - Generación de avatares y contenido multimedia
    - Sistema de notificaciones
    
    ## Autenticación
    
    La API utiliza JWT (JSON Web Tokens) para autenticación. Incluye el token en el header:
    ```
    Authorization: Bearer <token>
    ```
    
    ## Rate Limiting
    
    - **100 requests** por 15 minutos por IP
    - Headers de respuesta: `X-RateLimit-Limit`, `X-RateLimit-Remaining`
    
    ## Códigos de Estado
    
    - `200` - Éxito
    - `201` - Creado exitosamente
    - `400` - Solicitud inválida
    - `401` - No autorizado
    - `403` - Acceso denegado
    - `404` - Recurso no encontrado
    - `409` - Conflicto (ej. email duplicado)
    - `429` - Rate limit excedido
    - `500` - Error interno del servidor
    
  version: 1.0.0
  contact:
    name: InterviewAI Support
    email: soporte@interviewai.com
    url: https://interviewai.com/support
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3001/api
    description: Desarrollo local
  - url: https://api-staging.interviewai.com/api
    description: Staging
  - url: https://api.interviewai.com/api
    description: Producción

tags:
  - name: auth
    description: Autenticación y autorización
  - name: user
    description: Gestión de perfil de usuario
  - name: interviews
    description: Entrevistas y simulaciones
  - name: questions
    description: Banco de preguntas
  - name: ai
    description: Servicios de inteligencia artificial
  - name: media
    description: Gestión de archivos multimedia
  - name: notifications
    description: Sistema de notificaciones

paths:
  # === AUTENTICACIÓN ===
  /auth/register:
    post:
      tags: [auth]
      summary: Registrar nuevo usuario
      description: Crear una cuenta nueva en el sistema
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password, firstName, lastName]
              properties:
                email:
                  type: string
                  format: email
                  example: juan@example.com
                password:
                  type: string
                  minLength: 8
                  example: SecurePass123!
                firstName:
                  type: string
                  minLength: 2
                  example: Juan
                lastName:
                  type: string
                  minLength: 2
                  example: Pérez
      responses:
        '201':
          description: Usuario registrado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '409':
          $ref: '#/components/responses/ConflictError'

  /auth/login:
    post:
      tags: [auth]
      summary: Iniciar sesión
      description: Autenticar usuario y obtener tokens de acceso
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                  example: juan@example.com
                password:
                  type: string
                  example: SecurePass123!
      responses:
        '200':
          description: Inicio de sesión exitoso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /auth/refresh:
    post:
      tags: [auth]
      summary: Renovar token de acceso
      description: Obtener nuevo access token usando refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [refreshToken]
              properties:
                refreshToken:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      responses:
        '200':
          description: Token renovado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /auth/logout:
    post:
      tags: [auth]
      summary: Cerrar sesión
      description: Invalidar refresh token y cerrar sesión
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
      responses:
        '200':
          description: Sesión cerrada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  # === USUARIO ===
  /user/profile:
    get:
      tags: [user]
      summary: Obtener perfil del usuario
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Perfil del usuario
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    patch:
      tags: [user]
      summary: Actualizar perfil del usuario
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                avatar:
                  type: string
                  format: uri
      responses:
        '200':
          description: Perfil actualizado
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/User'

  /user/metrics:
    get:
      tags: [user]
      summary: Obtener métricas del usuario
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Métricas del usuario
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/UserMetrics'

  # === ENTREVISTAS ===
  /interviews:
    get:
      tags: [interviews]
      summary: Listar entrevistas del usuario
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: status
          in: query
          schema:
            type: string
            enum: [draft, in_progress, completed, cancelled]
      responses:
        '200':
          description: Lista de entrevistas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedInterviews'

    post:
      tags: [interviews]
      summary: Crear nueva entrevista
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InterviewCreate'
      responses:
        '201':
          description: Entrevista creada
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Interview'

  /interviews/{id}:
    get:
      tags: [interviews]
      summary: Obtener entrevista por ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Detalle de la entrevista
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Interview'
        '404':
          $ref: '#/components/responses/NotFoundError'

    patch:
      tags: [interviews]
      summary: Actualizar entrevista
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InterviewUpdate'
      responses:
        '200':
          description: Entrevista actualizada
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Interview'

  /interviews/{id}/start:
    post:
      tags: [interviews]
      summary: Iniciar entrevista
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Entrevista iniciada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /interviews/{id}/responses:
    post:
      tags: [interviews]
      summary: Guardar respuesta de entrevista
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                questionId:
                  type: string
                audio:
                  type: string
                  format: binary
                transcription:
                  type: string
                duration:
                  type: integer
      responses:
        '201':
          description: Respuesta guardada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  # === PREGUNTAS ===
  /questions:
    get:
      tags: [questions]
      summary: Obtener preguntas
      parameters:
        - name: category
          in: query
          schema:
            type: string
            enum: [technical_skills, problem_solving, communication, leadership, teamwork, adaptability]
        - name: difficulty
          in: query
          schema:
            type: string
            enum: [easy, medium, hard]
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
      responses:
        '200':
          description: Lista de preguntas
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Question'

  # === INTELIGENCIA ARTIFICIAL ===
  /ai/feedback/{interviewId}:
    post:
      tags: [ai]
      summary: Generar feedback automático
      security:
        - bearerAuth: []
      parameters:
        - name: interviewId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Feedback generado
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/InterviewFeedback'

  /ai/transcribe:
    post:
      tags: [ai]
      summary: Transcribir audio a texto
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                audio:
                  type: string
                  format: binary
                language:
                  type: string
                  default: es-ES
      responses:
        '200':
          description: Transcripción completada
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      transcription:
                        type: string
                      confidence:
                        type: number
                        format: float

  /ai/speech:
    post:
      tags: [ai]
      summary: Generar audio desde texto
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [text]
              properties:
                text:
                  type: string
                voice:
                  type: string
                  default: es-ES-ElviraNeural
                speed:
                  type: number
                  default: 1.0
      responses:
        '200':
          description: Audio generado
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      audioUrl:
                        type: string
                        format: uri

  # === MEDIA Y AVATAR ===
  /media/avatar/generate:
    post:
      tags: [media]
      summary: Generar video de avatar
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [text, avatarId]
              properties:
                text:
                  type: string
                avatarId:
                  type: string
                voice:
                  type: string
      responses:
        '202':
          description: Generación iniciada
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      jobId:
                        type: string
                      status:
                        type: string
                        enum: [processing]

  /media/avatar/status/{jobId}:
    get:
      tags: [media]
      summary: Consultar estado de generación de avatar
      security:
        - bearerAuth: []
      parameters:
        - name: jobId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Estado de la generación
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      status:
                        type: string
                        enum: [processing, completed, failed]
                      videoUrl:
                        type: string
                        format: uri
                      error:
                        type: string

  # === NOTIFICACIONES ===
  /notifications:
    get:
      tags: [notifications]
      summary: Obtener notificaciones del usuario
      security:
        - bearerAuth: []
      parameters:
        - name: unread
          in: query
          schema:
            type: boolean
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Lista de notificaciones
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Notification'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        role:
          type: string
          enum: [user, admin]
        avatar:
          type: string
          format: uri
        createdAt:
          type: string
          format: date-time

    AuthResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/User'
            token:
              type: string
            refreshToken:
              type: string

    TokenResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            token:
              type: string
            refreshToken:
              type: string

    Interview:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [draft, in_progress, completed, cancelled]
        type:
          type: string
          enum: [technical, behavioral, mixed, custom]
        duration:
          type: integer
        questions:
          type: array
          items:
            $ref: '#/components/schemas/Question'
        createdAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time

    InterviewCreate:
      type: object
      required: [title, type, duration]
      properties:
        title:
          type: string
        description:
          type: string
        type:
          type: string
          enum: [technical, behavioral, mixed, custom]
        duration:
          type: integer
        enableAvatar:
          type: boolean
          default: true
        enableRecording:
          type: boolean
          default: true

    InterviewUpdate:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [draft, in_progress, completed, cancelled]

    Question:
      type: object
      properties:
        id:
          type: string
        text:
          type: string
        category:
          type: string
          enum: [technical_skills, problem_solving, communication, leadership, teamwork, adaptability]
        difficulty:
          type: string
          enum: [easy, medium, hard]
        expectedDuration:
          type: integer

    InterviewFeedback:
      type: object
      properties:
        id:
          type: string
        overallScore:
          type: integer
          minimum: 0
          maximum: 100
        strengths:
          type: array
          items:
            type: string
        areasForImprovement:
          type: array
          items:
            type: string
        recommendations:
          type: array
          items:
            type: string

    UserMetrics:
      type: object
      properties:
        totalInterviews:
          type: integer
        completedInterviews:
          type: integer
        averageScore:
          type: number
          format: float
        totalPracticeTime:
          type: integer
        improvementRate:
          type: number
          format: float

    Notification:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          enum: [interview_completed, feedback_ready, reminder, achievement, system]
        title:
          type: string
        message:
          type: string
        read:
          type: boolean
        createdAt:
          type: string
          format: date-time

    PaginatedInterviews:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: array
          items:
            $ref: '#/components/schemas/Interview'
        pagination:
          type: object
          properties:
            page:
              type: integer
            limit:
              type: integer
            total:
              type: integer
            totalPages:
              type: integer

    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        errors:
          type: array
          items:
            type: string

  responses:
    ValidationError:
      description: Error de validación de datos
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    UnauthorizedError:
      description: No autorizado - token inválido o faltante
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    ForbiddenError:
      description: Acceso denegado - permisos insuficientes
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    NotFoundError:
      description: Recurso no encontrado
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    ConflictError:
      description: Conflicto - el recurso ya existe
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    RateLimitError:
      description: Rate limit excedido
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    InternalServerError:
      description: Error interno del servidor
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'